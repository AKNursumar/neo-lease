generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"  // Change to "postgresql" when using Supabase
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_DATABASE_URL") // Uncomment for Supabase
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  fullName     String?
  role         String   @default("user") // guest, user, owner, admin
  phone        String?  @unique
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  facilities   Facility[]
  bookings     Booking[]
  rentalOrders RentalOrder[]
  payments     Payment[]
  auditLogs    AuditLog[]
  apiKeys      ApiKey[]
}

model Facility {
  id          String    @id @default(uuid())
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  name        String
  description String?
  address     String?
  locationLat Float?
  locationLng Float?
  images      String?   // JSON string for now
  amenities   String?   // JSON string for now
  createdAt   DateTime  @default(now())
  courts      Court[]
  products    Product[]
}

model Court {
  id                String    @id @default(uuid())
  facility          Facility  @relation(fields: [facilityId], references: [id])
  facilityId        String
  name              String
  sportType         String
  capacity          Int?
  priceRules        String?   // JSON string
  availabilityConfig String?  // JSON string
  createdAt         DateTime  @default(now())
  bookings          Booking[]

  @@index([facilityId])
}

model Product {
  id           String    @id @default(uuid())
  facility     Facility  @relation(fields: [facilityId], references: [id])
  facilityId   String
  sku          String    @unique
  name         String
  description  String?
  isRental     Boolean   @default(true)
  pricing      String    // JSON string
  depositAmount Float?
  serialTracked Boolean  @default(false)
  quantity     Int       @default(0)
  rentalLines  RentalLine[]
  createdAt    DateTime  @default(now())

  @@index([facilityId])
}

model Booking {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  court        Court         @relation(fields: [courtId], references: [id])
  courtId      String
  startDateTime DateTime
  endDateTime  DateTime
  status       String        @default("draft") // draft, confirmed, cancelled, completed
  price        Float?
  invoice      Invoice?      @relation(fields: [invoiceId], references: [id])
  invoiceId    String?
  createdAt    DateTime      @default(now())

  @@index([courtId])
  @@index([userId])
  @@index([startDateTime, endDateTime])
}

model RentalOrder {
  id            String        @id @default(uuid())
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  rentalLines   RentalLine[]
  startDate     DateTime
  endDate       DateTime
  status        String
  depositTaken  Boolean       @default(false)
  invoice       Invoice?      @relation(fields: [invoiceId], references: [id])
  invoiceId     String?
  createdAt     DateTime      @default(now())

  @@index([userId])
}

model RentalLine {
  id           String      @id @default(uuid())
  rentalOrder  RentalOrder @relation(fields: [rentalOrderId], references: [id])
  rentalOrderId String
  product      Product     @relation(fields: [productId], references: [id])
  productId    String
  quantity     Int
  unitPrice    Float
  totalPrice   Float
  serialNumbers String?     // JSON string
}

model Payment {
  id               String          @id @default(uuid())
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  amount           Float
  currency         String
  provider         String          // razorpay, stripe
  providerPaymentId String? @unique
  providerOrderId  String? @unique
  status           String          @default("pending") // pending, succeeded, failed, refunded, partially_refunded
  meta             String?         // JSON string
  createdAt        DateTime        @default(now())
}

model Invoice {
  id        String   @id @default(uuid())
  amount    Float
  status    String
  lines     String   // JSON string
  createdAt DateTime @default(now())
  
  bookings     Booking[]
  rentalOrders RentalOrder[]
}

model WebhookLog {
  id         String   @id @default(uuid())
  provider   String
  eventType  String
  payload    String   // JSON string
  signature  String?
  processed  Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([provider, eventType])
}

model AuditLog {
  id          String   @id @default(uuid())
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  action      String
  resourceType String
  resourceId  String?
  diff        String?  // JSON string
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([resourceType, resourceId])
}

model ApiKey {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  hash      String   // hashed api key
  scopes    String?  // JSON string array
  rateLimit Int?     // optional per-key rate limit
  createdAt DateTime @default(now())
  revoked   Boolean  @default(false)

  @@index([userId])
}
